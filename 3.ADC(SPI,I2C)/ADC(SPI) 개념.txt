##통신 방식의 비교
https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=prnbada7&logNo=221377457826

Serial Peripheral Interface(SPI)

## SPI 통합개념

- 직렬 주변기기 인터페이스 

- 동기식 통신 방식	
  별도의 CLOCK LINE 공유
  Rising CLOCK edge or Falling CLOCK edge일때 data line의 data 송수신
  
- 오직 한 장치만 CLOCK 생성=Master, 나머지 통신에 참가한 장치들=Slave

- 1:n통신 쌉가능, 동기식 전이중 통신( synchronous, full duplex master-slave-based interface)
  속도 빠름?, 간단한 shift register로 하드웨어 구성
  노이즈 취약, 짧은 거리동작

- Master >> Slave data 이동시
  MOSI(Master Out / Slave In) line 사용
 
- Slave >> Master date 이동시
  MISO(Master In / Slave Out) line 사용
  
- SCLK(CLK) line
  clock을 Master >> Slave로 전송하는 line
  송신용 clock signal수신용 clock
  
- SS(CS) line (Slave Select,Chip Select)
  data 송수신시 어느 Slave와 송수신하는지 선택
  active low로 동작
  
- Multislave Configuration
  1. Regular mode
      individual chip select for each slave
	  If multiple chip select signals are enabled, the data on the
         MISO line is corrupted, as there is no way for the master 
		 to identify which slave is transmitting the data
	  연결할 선들이 많아져 여러개의 cs는 힘듬>> mux 이용해서 사용
	   
  2. Daisy-chain mode
     MOSI,MISO 체인처럼 연결후 SS라인 공유
     Master >> Slave 단방향으로만 사용시 유용 ex) RGB LED strip
	 MISO 생략가능
	 
- Master가 polarity(극성), phase(위상) 선택가능
  CPOL bit는 idle state 일때 극성 설정 가능, 초록색은 통신의 시작과 끝
  CPHA bit는 data sampling(MOSI,주황색) edge state,
            data shifted(MISO,파란색) edge state 설정

- 장점 : 완전한 전이중 통신
	    전송되는 비트에 대한 완전한 프로토콜 유연성(8-bit words에 제한되지 않음)
		전송기 불필요
		단순한 하드웨어 인터페이스 처리
		ic패키지 구성 단순한
		CLOCK 속도 제한 없음
		
- 단점 : 하드웨어 슬레이브 인식이 없다
        슬레이브에 의한 하드웨어 흐름 제어 없음
		오류 검사 프로토콜 정의되지 않음
		일반적으로 노이즈 스파이크에 영향을 받는 경향이 있음
		RS-232,RS485,CAN 버스보다 짧은 거리에서 동작
		하나의 마스터 장치만 지원
		
https://www.hardcopyworld.com/?p=2778

https://en.wikipedia.org/wiki/Serial_Peripheral_Interface

## MCP3208-BI/P 개념

- SAR ADC 축차 비교형 아날로그-디지컬 변환회로
  DAC와 비교기 사용 각각의 비트에 대해 한 클럭에 상위비트부터 하위비트쪾으로 결정해가는 방식
  기준값을 변화하여 반복 비교>> 구조 간단, 반복한느 시간이 보장된다면 정확도가 높다
  샘플링 속도가 느리다, 비교기의 숫자가 늘어날수록 비용이 증가한다.
  
- 잡음제거 아날로그-디지컬ground 연결
  device에 1uF bypass capacitor 요구
  VDD연결시 STAR형실으로 회로구성
  
- SGL/DIFF bit : 싱글 or 차동 결정
  D2,D1,D0는 CH선택
  D0이후 SAMPLE 시간 있음
  ADC값 반환전 NULL BIT로 시작후 MSB부터 MLB 순서로 12CLOCK에 따라 반환
  그림 5.1은 CLK의 하강에지일때 Data Ooutput
  12-bit를 출력하고 계속 CS가 low state일 경우 그림 5.2처럼 된다.
  
- Minimum Clock Speed가 있음 최대 1.2ms 초과하면 안됨


## 코드

#include <wiringPiSPI.H>

- int wiringPiSPISetup(int channel,int speed);
  channel : 채널 0,1을 선택하여 초기화
  speed : 500khz~32000khz범위 내의 정수형 clock speed 설정
  return value : 오류시 -1 or Linux file_descriptorfor device
                 ,standard errno global variable를 사용하여 원인 파악 가능
				 
- int wiringPiSPIDataRW(int channel. unsigned char *dat, int len);
  channel : 초기화된 채널 선택
  *data : 3개의 8bit buffer에 있는 데이터가 자동 전송 수신된 되이터는 buffer에 덮어쓰기
  len : buffer size
  선택된 spi bus에서 동시에 read/write, buffer에 있던 data는 새로운 data에 의해 덮어짐
  A/D, D/A converter는  동시에 쓰기/읽기 수행을 해야하함
  
- int wiringPiSPIGetFd(int channel);
  채널에 대한 fd를 반환
http://wiringpi.com/reference/spi-library/